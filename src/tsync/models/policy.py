"""
Определение политик (стратегий) синхронизации файлов в проекте.
"""
import enum

class Policy(enum.Enum):
    """
    Контракт, определяющий все возможные политики (стратегии) синхронизации.

    Этот Enum — единственный источник правды о том, какие значения может
    принимать поле `policy` в манифестах.
    """

    """
    Принудительная синхронизация. Файл в проекте всегда будет перезаписан
    версией из toolkit. Любые локальные изменения будут стерты безвозвратно.
    - Плюсы: Гарантирует 100% соответствие стандарту.
    - Минусы: Не позволяет делать локальные исключения или кастомизацию.
    - Идеально для: Правил линтеров, конфигураций CI/CD, правил релизов.
    """
    SYNC_STRICT = "sync-strict"

    """
    Инициализация. Файл копируется из toolkit, только если он не существует
    в проекте. Если файл уже есть, tsync его никогда не тронет.
    - Плюсы: Дает разработчику полный контроль над файлом после его создания.
    - Минусы: Файл может сильно "отстать" от стандарта со временем.
    - Идеально для: Файлов-шаблонов, которые всегда кастомизируются (например, .pre-commit-config.yaml, buf.yaml).
    """
    INIT = "init"

    """
    Шаблонизация. Файл из toolkit является шаблоном. Скрипт "рендерит" его,
    подставляя переменные (`vars`) из `.project.toolkit.yml`.
    - Плюсы: Максимальная гибкость для конфигураций, зависящих от проекта.
    - Минусы: Усложняет `toolkit`, так как нужно поддерживать шаблоны.
    - Идеально для: buf.gen.yaml, Makefile-модулей, где нужны уникальные пути.
    """
    TEMPLATE = "template"

    """
    "Умное" слияние. `tsync` сам определит тип файла (текст, JSON, YAML)
    и применит соответствующую логику слияния.
    - Для текста: Добавление уникальных строк.
    - Для JSON/YAML: Рекурсивное объединение ключей.
    - Идеально для: `.gitignore`, `package.json`, `pyproject.toml`.
    """
    MERGE = "merge"

